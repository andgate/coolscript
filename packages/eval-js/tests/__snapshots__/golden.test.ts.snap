// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "bool1": bool1 1`] = `
Object {
  "value": true,
}
`;

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "bool2": bool2 1`] = `
Object {
  "value": false,
}
`;

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "example1": example1 1`] = `
Object {
  "value": Array [
    "F",
    "o",
    "o",
    "b",
    "a",
    "r",
  ],
}
`;

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "example2": example2 1`] = `
Object {
  "errors": Array [
    [Error: Parser failed! Error message: Syntax error at line 12 col 18:

      j = s.length -
                   ^
Unexpected keyword token: "-". Instead, I was expecting to see one of the following:

A ";" based on:
    statement_list_tail → _ ● ";" _ statement
    statement_list$ebnf$1 → statement_list$ebnf$1 ● statement_list_tail
    statement_list → statement ● statement_list$ebnf$1
    block_statement$ebnf$1 →  ● statement_list
    block_statement → "{" _ ● block_statement$ebnf$1 _ block_statement$ebnf$2 "}"
    do_term → "do" _ ● block_statement
    cterm →  ● do_term
    term →  ● cterm
    lambda_term → "(" _ lambda_arguments _ lambda_term$ebnf$1 ")" _ "=>" _ ● term
    cterm →  ● lambda_term
    term →  ● cterm
    variable_declaration → identifier_token _ "=" _ ● term
    declaration →  ● variable_declaration
    let_declarations_tail → _ ";" _ ● declaration
    let_declarations$ebnf$1 → let_declarations$ebnf$1 ● let_declarations_tail
    let_declarations → declaration ● let_declarations$ebnf$1
    let_term → "let" _ ● let_declarations _ let_term$ebnf$1 "in" _ term
    cterm →  ● let_term
    term →  ● cterm
    file → _ ● term _
    main →  ● file
A newline token based on:
    _ → _ ● %newline _
    index_access_term → bterm ● _ "[" _ bterm _ "]"
    bterm →  ● index_access_term
    cterm →  ● bterm
    term →  ● cterm
    assignment_statement → identifier_token _ "=" _ ● term
    statement →  ● assignment_statement
    statement_list_tail → _ ";" _ ● statement
    statement_list$ebnf$1 → statement_list$ebnf$1 ● statement_list_tail
    statement_list → statement ● statement_list$ebnf$1
    block_statement$ebnf$1 →  ● statement_list
    block_statement → "{" _ ● block_statement$ebnf$1 _ block_statement$ebnf$2 "}"
    do_term → "do" _ ● block_statement
    cterm →  ● do_term
    term →  ● cterm
    lambda_term → "(" _ lambda_arguments _ lambda_term$ebnf$1 ")" _ "=>" _ ● term
    cterm →  ● lambda_term
    term →  ● cterm
    variable_declaration → identifier_token _ "=" _ ● term
    declaration →  ● variable_declaration
    let_declarations_tail → _ ";" _ ● declaration
    let_declarations$ebnf$1 → let_declarations$ebnf$1 ● let_declarations_tail
    let_declarations → declaration ● let_declarations$ebnf$1
    let_term → "let" _ ● let_declarations _ let_term$ebnf$1 "in" _ term
    cterm →  ● let_term
    term →  ● cterm
    file → _ ● term _
    main →  ● file
A comment token based on:
    _ → _ ● %comment _
    index_access_term → bterm ● _ "[" _ bterm _ "]"
    bterm →  ● index_access_term
    cterm →  ● bterm
    term →  ● cterm
    assignment_statement → identifier_token _ "=" _ ● term
    statement →  ● assignment_statement
    statement_list_tail → _ ";" _ ● statement
    statement_list$ebnf$1 → statement_list$ebnf$1 ● statement_list_tail
    statement_list → statement ● statement_list$ebnf$1
    block_statement$ebnf$1 →  ● statement_list
    block_statement → "{" _ ● block_statement$ebnf$1 _ block_statement$ebnf$2 "}"
    do_term → "do" _ ● block_statement
    cterm →  ● do_term
    term →  ● cterm
    lambda_term → "(" _ lambda_arguments _ lambda_term$ebnf$1 ")" _ "=>" _ ● term
    cterm →  ● lambda_term
    term →  ● cterm
    variable_declaration → identifier_token _ "=" _ ● term
    declaration →  ● variable_declaration
    let_declarations_tail → _ ";" _ ● declaration
    let_declarations$ebnf$1 → let_declarations$ebnf$1 ● let_declarations_tail
    let_declarations → declaration ● let_declarations$ebnf$1
    let_term → "let" _ ● let_declarations _ let_term$ebnf$1 "in" _ term
    cterm →  ● let_term
    term →  ● cterm
    file → _ ● term _
    main →  ● file
A "(" based on:
    call_term → bterm _ ● "(" _ call_arguments _ call_term$ebnf$1 ")"
    bterm →  ● call_term
    cterm →  ● bterm
    term →  ● cterm
    assignment_statement → identifier_token _ "=" _ ● term
    statement →  ● assignment_statement
    statement_list_tail → _ ";" _ ● statement
    statement_list$ebnf$1 → statement_list$ebnf$1 ● statement_list_tail
    statement_list → statement ● statement_list$ebnf$1
    block_statement$ebnf$1 →  ● statement_list
    block_statement → "{" _ ● block_statement$ebnf$1 _ block_statement$ebnf$2 "}"
    do_term → "do" _ ● block_statement
    cterm →  ● do_term
    term →  ● cterm
    lambda_term → "(" _ lambda_arguments _ lambda_term$ebnf$1 ")" _ "=>" _ ● term
    cterm →  ● lambda_term
    term →  ● cterm
    variable_declaration → identifier_token _ "=" _ ● term
    declaration →  ● variable_declaration
    let_declarations_tail → _ ";" _ ● declaration
    let_declarations$ebnf$1 → let_declarations$ebnf$1 ● let_declarations_tail
    let_declarations → declaration ● let_declarations$ebnf$1
    let_term → "let" _ ● let_declarations _ let_term$ebnf$1 "in" _ term
    cterm →  ● let_term
    term →  ● cterm
    file → _ ● term _
    main →  ● file
A "." based on:
    member_access_term → bterm _ ● "." _ identifier_token
    bterm →  ● member_access_term
    cterm →  ● bterm
    term →  ● cterm
    assignment_statement → identifier_token _ "=" _ ● term
    statement →  ● assignment_statement
    statement_list_tail → _ ";" _ ● statement
    statement_list$ebnf$1 → statement_list$ebnf$1 ● statement_list_tail
    statement_list → statement ● statement_list$ebnf$1
    block_statement$ebnf$1 →  ● statement_list
    block_statement → "{" _ ● block_statement$ebnf$1 _ block_statement$ebnf$2 "}"
    do_term → "do" _ ● block_statement
    cterm →  ● do_term
    term →  ● cterm
    lambda_term → "(" _ lambda_arguments _ lambda_term$ebnf$1 ")" _ "=>" _ ● term
    cterm →  ● lambda_term
    term →  ● cterm
    variable_declaration → identifier_token _ "=" _ ● term
    declaration →  ● variable_declaration
    let_declarations_tail → _ ";" _ ● declaration
    let_declarations$ebnf$1 → let_declarations$ebnf$1 ● let_declarations_tail
    let_declarations → declaration ● let_declarations$ebnf$1
    let_term → "let" _ ● let_declarations _ let_term$ebnf$1 "in" _ term
    cterm →  ● let_term
    term →  ● cterm
    file → _ ● term _
    main →  ● file
A "[" based on:
    index_access_term → bterm _ ● "[" _ bterm _ "]"
    bterm →  ● index_access_term
    cterm →  ● bterm
    term →  ● cterm
    assignment_statement → identifier_token _ "=" _ ● term
    statement →  ● assignment_statement
    statement_list_tail → _ ";" _ ● statement
    statement_list$ebnf$1 → statement_list$ebnf$1 ● statement_list_tail
    statement_list → statement ● statement_list$ebnf$1
    block_statement$ebnf$1 →  ● statement_list
    block_statement → "{" _ ● block_statement$ebnf$1 _ block_statement$ebnf$2 "}"
    do_term → "do" _ ● block_statement
    cterm →  ● do_term
    term →  ● cterm
    lambda_term → "(" _ lambda_arguments _ lambda_term$ebnf$1 ")" _ "=>" _ ● term
    cterm →  ● lambda_term
    term →  ● cterm
    variable_declaration → identifier_token _ "=" _ ● term
    declaration →  ● variable_declaration
    let_declarations_tail → _ ";" _ ● declaration
    let_declarations$ebnf$1 → let_declarations$ebnf$1 ● let_declarations_tail
    let_declarations → declaration ● let_declarations$ebnf$1
    let_term → "let" _ ● let_declarations _ let_term$ebnf$1 "in" _ term
    cterm →  ● let_term
    term →  ● cterm
    file → _ ● term _
    main →  ● file
A "}" based on:
    block_statement → "{" _ block_statement$ebnf$1 _ block_statement$ebnf$2 ● "}"
    do_term → "do" _ ● block_statement
    cterm →  ● do_term
    term →  ● cterm
    lambda_term → "(" _ lambda_arguments _ lambda_term$ebnf$1 ")" _ "=>" _ ● term
    cterm →  ● lambda_term
    term →  ● cterm
    variable_declaration → identifier_token _ "=" _ ● term
    declaration →  ● variable_declaration
    let_declarations_tail → _ ";" _ ● declaration
    let_declarations$ebnf$1 → let_declarations$ebnf$1 ● let_declarations_tail
    let_declarations → declaration ● let_declarations$ebnf$1
    let_term → "let" _ ● let_declarations _ let_term$ebnf$1 "in" _ term
    cterm →  ● let_term
    term →  ● cterm
    file → _ ● term _
    main →  ● file
A ";" based on:
    block_statement$ebnf$2$subexpression$1 →  ● ";" _
    block_statement$ebnf$2 → block_statement$ebnf$2 ● block_statement$ebnf$2$subexpression$1
    block_statement → "{" _ block_statement$ebnf$1 _ ● block_statement$ebnf$2 "}"
    do_term → "do" _ ● block_statement
    cterm →  ● do_term
    term →  ● cterm
    lambda_term → "(" _ lambda_arguments _ lambda_term$ebnf$1 ")" _ "=>" _ ● term
    cterm →  ● lambda_term
    term →  ● cterm
    variable_declaration → identifier_token _ "=" _ ● term
    declaration →  ● variable_declaration
    let_declarations_tail → _ ";" _ ● declaration
    let_declarations$ebnf$1 → let_declarations$ebnf$1 ● let_declarations_tail
    let_declarations → declaration ● let_declarations$ebnf$1
    let_term → "let" _ ● let_declarations _ let_term$ebnf$1 "in" _ term
    cterm →  ● let_term
    term →  ● cterm
    file → _ ● term _
    main →  ● file
],
  ],
  "value": null,
}
`;

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "lambda1": lambda1 1`] = `
Object {
  "value": [Function],
}
`;

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "let1": let1 1`] = `
Object {
  "value": 1,
}
`;

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "let2": let2 1`] = `
Object {
  "value": 1,
}
`;

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "let3": let3 1`] = `
Object {
  "value": Array [
    1,
    2,
  ],
}
`;

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "null1": null1 1`] = `
Object {
  "errors": Array [
    [Error: No parse results were recovered.],
  ],
  "value": null,
}
`;

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "null2": null2 1`] = `
Object {
  "value": null,
}
`;

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "number1": number1 1`] = `
Object {
  "value": 0,
}
`;

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "number2": number2 1`] = `
Object {
  "value": 1234567890,
}
`;

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "number3": number3 1`] = `
Object {
  "value": 1234567890.0123458,
}
`;

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "string1": string1 1`] = `
Object {
  "value": "",
}
`;

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "string2": string2 1`] = `
Object {
  "value": "",
}
`;

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "string3": string3 1`] = `
Object {
  "value": "Hello world!",
}
`;

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "string4": string4 1`] = `
Object {
  "value": "Hello World!",
}
`;

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "string5": string5 1`] = `
Object {
  "value": "The quick brown fox jumps over the lazy dog.",
}
`;

exports[`CoolScript JS Evaluator Golden Test Suite Evaluating example "string6": string6 1`] = `
Object {
  "value": "The quick brown fox jumps over the lazy dog.",
}
`;
