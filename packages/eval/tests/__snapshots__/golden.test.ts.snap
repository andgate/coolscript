// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "bool1": bool1 1`] = `
Object {
  "value": Object {
    "ann": Object {
      "scope": Scope {
        "enclosingScope": null,
        "symbols": Map {},
      },
      "span": Object {
        "column": Object {
          "end": 5,
          "start": 1,
        },
        "line": Object {
          "end": 1,
          "start": 1,
        },
        "type": "Span",
      },
    },
    "bool": true,
    "tag": "BooleanValue",
  },
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "bool2": bool2 1`] = `
Object {
  "value": Object {
    "ann": Object {
      "scope": Scope {
        "enclosingScope": null,
        "symbols": Map {},
      },
      "span": Object {
        "column": Object {
          "end": 6,
          "start": 1,
        },
        "line": Object {
          "end": 1,
          "start": 1,
        },
        "type": "Span",
      },
    },
    "bool": false,
    "tag": "BooleanValue",
  },
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "call1": call1 1`] = `
Object {
  "value": Object {
    "ann": Object {
      "scope": Scope {
        "enclosingScope": Scope {
          "enclosingScope": null,
          "symbols": Map {},
        },
        "symbols": Map {
          "f" => Object {
            "id": "f",
            "scope": [Circular],
          },
        },
      },
      "span": Object {
        "column": Object {
          "end": 24,
          "start": 23,
        },
        "line": Object {
          "end": 1,
          "start": 1,
        },
        "type": "Span",
      },
    },
    "num": 1,
    "tag": "NumberValue",
  },
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "example1": example1 1`] = `
Object {
  "value": Object {
    "elements": Array [
      Object {
        "ann": Object {
          "scope": Scope {
            "enclosingScope": Scope {
              "enclosingScope": Scope {
                "enclosingScope": null,
                "symbols": Map {},
              },
              "symbols": Map {
                "id" => Object {
                  "id": "id",
                  "scope": [Circular],
                },
                "constant" => Object {
                  "id": "constant",
                  "scope": [Circular],
                },
                "createFoo" => Object {
                  "id": "createFoo",
                  "scope": [Circular],
                },
                "bar" => Object {
                  "id": "bar",
                  "scope": [Circular],
                },
              },
            },
            "symbols": Map {
              "x" => Object {
                "id": "x",
                "scope": [Circular],
              },
            },
          },
          "span": Object {
            "column": Object {
              "end": 15,
              "start": 12,
            },
            "line": Object {
              "end": 6,
              "start": 6,
            },
            "type": "Span",
          },
        },
        "str": "F",
        "tag": "StringValue",
      },
      Object {
        "ann": Object {
          "scope": Scope {
            "enclosingScope": Scope {
              "enclosingScope": Scope {
                "enclosingScope": null,
                "symbols": Map {},
              },
              "symbols": Map {
                "id" => Object {
                  "id": "id",
                  "scope": [Circular],
                },
                "constant" => Object {
                  "id": "constant",
                  "scope": [Circular],
                },
                "createFoo" => Object {
                  "id": "createFoo",
                  "scope": [Circular],
                },
                "bar" => Object {
                  "id": "bar",
                  "scope": [Circular],
                },
              },
            },
            "symbols": Map {
              "x" => Object {
                "id": "x",
                "scope": [Circular],
              },
            },
          },
          "span": Object {
            "column": Object {
              "end": 20,
              "start": 17,
            },
            "line": Object {
              "end": 6,
              "start": 6,
            },
            "type": "Span",
          },
        },
        "str": "o",
        "tag": "StringValue",
      },
      Object {
        "ann": Object {
          "scope": Scope {
            "enclosingScope": Scope {
              "enclosingScope": Scope {
                "enclosingScope": null,
                "symbols": Map {},
              },
              "symbols": Map {
                "id" => Object {
                  "id": "id",
                  "scope": [Circular],
                },
                "constant" => Object {
                  "id": "constant",
                  "scope": [Circular],
                },
                "createFoo" => Object {
                  "id": "createFoo",
                  "scope": [Circular],
                },
                "bar" => Object {
                  "id": "bar",
                  "scope": [Circular],
                },
              },
            },
            "symbols": Map {
              "x" => Object {
                "id": "x",
                "scope": [Circular],
              },
            },
          },
          "span": Object {
            "column": Object {
              "end": 25,
              "start": 22,
            },
            "line": Object {
              "end": 6,
              "start": 6,
            },
            "type": "Span",
          },
        },
        "str": "o",
        "tag": "StringValue",
      },
      Object {
        "ann": Object {
          "scope": Scope {
            "enclosingScope": Scope {
              "enclosingScope": Scope {
                "enclosingScope": null,
                "symbols": Map {},
              },
              "symbols": Map {
                "id" => Object {
                  "id": "id",
                  "scope": [Circular],
                },
                "constant" => Object {
                  "id": "constant",
                  "scope": [Circular],
                },
                "createFoo" => Object {
                  "id": "createFoo",
                  "scope": [Circular],
                },
                "bar" => Object {
                  "id": "bar",
                  "scope": [Circular],
                },
              },
            },
            "symbols": Map {
              "x" => Object {
                "id": "x",
                "scope": [Circular],
              },
            },
          },
          "span": Object {
            "column": Object {
              "end": 30,
              "start": 27,
            },
            "line": Object {
              "end": 6,
              "start": 6,
            },
            "type": "Span",
          },
        },
        "str": "b",
        "tag": "StringValue",
      },
      Object {
        "ann": Object {
          "scope": Scope {
            "enclosingScope": Scope {
              "enclosingScope": Scope {
                "enclosingScope": null,
                "symbols": Map {},
              },
              "symbols": Map {
                "id" => Object {
                  "id": "id",
                  "scope": [Circular],
                },
                "constant" => Object {
                  "id": "constant",
                  "scope": [Circular],
                },
                "createFoo" => Object {
                  "id": "createFoo",
                  "scope": [Circular],
                },
                "bar" => Object {
                  "id": "bar",
                  "scope": [Circular],
                },
              },
            },
            "symbols": Map {
              "x" => Object {
                "id": "x",
                "scope": [Circular],
              },
            },
          },
          "span": Object {
            "column": Object {
              "end": 35,
              "start": 32,
            },
            "line": Object {
              "end": 6,
              "start": 6,
            },
            "type": "Span",
          },
        },
        "str": "a",
        "tag": "StringValue",
      },
      Object {
        "ann": Object {
          "scope": Scope {
            "enclosingScope": Scope {
              "enclosingScope": Scope {
                "enclosingScope": null,
                "symbols": Map {},
              },
              "symbols": Map {
                "id" => Object {
                  "id": "id",
                  "scope": [Circular],
                },
                "constant" => Object {
                  "id": "constant",
                  "scope": [Circular],
                },
                "createFoo" => Object {
                  "id": "createFoo",
                  "scope": [Circular],
                },
                "bar" => Object {
                  "id": "bar",
                  "scope": [Circular],
                },
              },
            },
            "symbols": Map {
              "x" => Object {
                "id": "x",
                "scope": [Circular],
              },
            },
          },
          "span": Object {
            "column": Object {
              "end": 40,
              "start": 37,
            },
            "line": Object {
              "end": 6,
              "start": 6,
            },
            "type": "Span",
          },
        },
        "str": "r",
        "tag": "StringValue",
      },
    ],
    "tag": "ArrayValue",
  },
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "example2": example2 1`] = `
Object {
  "errors": Array [
    [Error: Parser failed! Error message: Syntax error at line 12 col 18:

      j = s.length -
                   ^
Unexpected keyword token: "-". Instead, I was expecting to see one of the following:

A ";" based on:
    statement_list_tail → _ ● ";" _ statement
    statement_list$ebnf$1 → statement_list$ebnf$1 ● statement_list_tail
    statement_list → statement ● statement_list$ebnf$1
    block_statement$ebnf$1 →  ● statement_list
    block_statement → "{" _ ● block_statement$ebnf$1 _ block_statement$ebnf$2 "}"
    do_term → "do" _ ● block_statement
    cterm →  ● do_term
    term →  ● cterm
    lambda_term → "(" _ lambda_arguments _ lambda_term$ebnf$1 ")" _ "=>" _ ● term
    cterm →  ● lambda_term
    term →  ● cterm
    variable_declaration → identifier_token _ "=" _ ● term
    declaration →  ● variable_declaration
    let_declarations_tail → _ ";" _ ● declaration
    let_declarations$ebnf$1 → let_declarations$ebnf$1 ● let_declarations_tail
    let_declarations → declaration ● let_declarations$ebnf$1
    let_term → "let" _ ● let_declarations _ let_term$ebnf$1 "in" _ term
    cterm →  ● let_term
    term →  ● cterm
    file → _ ● term _
    main →  ● file
A newline token based on:
    _ → _ ● %newline _
    index_access_term → bterm ● _ "[" _ bterm _ "]"
    bterm →  ● index_access_term
    cterm →  ● bterm
    term →  ● cterm
    assignment_statement → identifier_token _ "=" _ ● term
    statement →  ● assignment_statement
    statement_list_tail → _ ";" _ ● statement
    statement_list$ebnf$1 → statement_list$ebnf$1 ● statement_list_tail
    statement_list → statement ● statement_list$ebnf$1
    block_statement$ebnf$1 →  ● statement_list
    block_statement → "{" _ ● block_statement$ebnf$1 _ block_statement$ebnf$2 "}"
    do_term → "do" _ ● block_statement
    cterm →  ● do_term
    term →  ● cterm
    lambda_term → "(" _ lambda_arguments _ lambda_term$ebnf$1 ")" _ "=>" _ ● term
    cterm →  ● lambda_term
    term →  ● cterm
    variable_declaration → identifier_token _ "=" _ ● term
    declaration →  ● variable_declaration
    let_declarations_tail → _ ";" _ ● declaration
    let_declarations$ebnf$1 → let_declarations$ebnf$1 ● let_declarations_tail
    let_declarations → declaration ● let_declarations$ebnf$1
    let_term → "let" _ ● let_declarations _ let_term$ebnf$1 "in" _ term
    cterm →  ● let_term
    term →  ● cterm
    file → _ ● term _
    main →  ● file
A comment token based on:
    _ → _ ● %comment _
    index_access_term → bterm ● _ "[" _ bterm _ "]"
    bterm →  ● index_access_term
    cterm →  ● bterm
    term →  ● cterm
    assignment_statement → identifier_token _ "=" _ ● term
    statement →  ● assignment_statement
    statement_list_tail → _ ";" _ ● statement
    statement_list$ebnf$1 → statement_list$ebnf$1 ● statement_list_tail
    statement_list → statement ● statement_list$ebnf$1
    block_statement$ebnf$1 →  ● statement_list
    block_statement → "{" _ ● block_statement$ebnf$1 _ block_statement$ebnf$2 "}"
    do_term → "do" _ ● block_statement
    cterm →  ● do_term
    term →  ● cterm
    lambda_term → "(" _ lambda_arguments _ lambda_term$ebnf$1 ")" _ "=>" _ ● term
    cterm →  ● lambda_term
    term →  ● cterm
    variable_declaration → identifier_token _ "=" _ ● term
    declaration →  ● variable_declaration
    let_declarations_tail → _ ";" _ ● declaration
    let_declarations$ebnf$1 → let_declarations$ebnf$1 ● let_declarations_tail
    let_declarations → declaration ● let_declarations$ebnf$1
    let_term → "let" _ ● let_declarations _ let_term$ebnf$1 "in" _ term
    cterm →  ● let_term
    term →  ● cterm
    file → _ ● term _
    main →  ● file
A "(" based on:
    call_term → bterm _ ● "(" _ call_arguments _ call_term$ebnf$1 ")"
    bterm →  ● call_term
    cterm →  ● bterm
    term →  ● cterm
    assignment_statement → identifier_token _ "=" _ ● term
    statement →  ● assignment_statement
    statement_list_tail → _ ";" _ ● statement
    statement_list$ebnf$1 → statement_list$ebnf$1 ● statement_list_tail
    statement_list → statement ● statement_list$ebnf$1
    block_statement$ebnf$1 →  ● statement_list
    block_statement → "{" _ ● block_statement$ebnf$1 _ block_statement$ebnf$2 "}"
    do_term → "do" _ ● block_statement
    cterm →  ● do_term
    term →  ● cterm
    lambda_term → "(" _ lambda_arguments _ lambda_term$ebnf$1 ")" _ "=>" _ ● term
    cterm →  ● lambda_term
    term →  ● cterm
    variable_declaration → identifier_token _ "=" _ ● term
    declaration →  ● variable_declaration
    let_declarations_tail → _ ";" _ ● declaration
    let_declarations$ebnf$1 → let_declarations$ebnf$1 ● let_declarations_tail
    let_declarations → declaration ● let_declarations$ebnf$1
    let_term → "let" _ ● let_declarations _ let_term$ebnf$1 "in" _ term
    cterm →  ● let_term
    term →  ● cterm
    file → _ ● term _
    main →  ● file
A "." based on:
    member_access_term → bterm _ ● "." _ identifier_token
    bterm →  ● member_access_term
    cterm →  ● bterm
    term →  ● cterm
    assignment_statement → identifier_token _ "=" _ ● term
    statement →  ● assignment_statement
    statement_list_tail → _ ";" _ ● statement
    statement_list$ebnf$1 → statement_list$ebnf$1 ● statement_list_tail
    statement_list → statement ● statement_list$ebnf$1
    block_statement$ebnf$1 →  ● statement_list
    block_statement → "{" _ ● block_statement$ebnf$1 _ block_statement$ebnf$2 "}"
    do_term → "do" _ ● block_statement
    cterm →  ● do_term
    term →  ● cterm
    lambda_term → "(" _ lambda_arguments _ lambda_term$ebnf$1 ")" _ "=>" _ ● term
    cterm →  ● lambda_term
    term →  ● cterm
    variable_declaration → identifier_token _ "=" _ ● term
    declaration →  ● variable_declaration
    let_declarations_tail → _ ";" _ ● declaration
    let_declarations$ebnf$1 → let_declarations$ebnf$1 ● let_declarations_tail
    let_declarations → declaration ● let_declarations$ebnf$1
    let_term → "let" _ ● let_declarations _ let_term$ebnf$1 "in" _ term
    cterm →  ● let_term
    term →  ● cterm
    file → _ ● term _
    main →  ● file
A "[" based on:
    index_access_term → bterm _ ● "[" _ bterm _ "]"
    bterm →  ● index_access_term
    cterm →  ● bterm
    term →  ● cterm
    assignment_statement → identifier_token _ "=" _ ● term
    statement →  ● assignment_statement
    statement_list_tail → _ ";" _ ● statement
    statement_list$ebnf$1 → statement_list$ebnf$1 ● statement_list_tail
    statement_list → statement ● statement_list$ebnf$1
    block_statement$ebnf$1 →  ● statement_list
    block_statement → "{" _ ● block_statement$ebnf$1 _ block_statement$ebnf$2 "}"
    do_term → "do" _ ● block_statement
    cterm →  ● do_term
    term →  ● cterm
    lambda_term → "(" _ lambda_arguments _ lambda_term$ebnf$1 ")" _ "=>" _ ● term
    cterm →  ● lambda_term
    term →  ● cterm
    variable_declaration → identifier_token _ "=" _ ● term
    declaration →  ● variable_declaration
    let_declarations_tail → _ ";" _ ● declaration
    let_declarations$ebnf$1 → let_declarations$ebnf$1 ● let_declarations_tail
    let_declarations → declaration ● let_declarations$ebnf$1
    let_term → "let" _ ● let_declarations _ let_term$ebnf$1 "in" _ term
    cterm →  ● let_term
    term →  ● cterm
    file → _ ● term _
    main →  ● file
A "}" based on:
    block_statement → "{" _ block_statement$ebnf$1 _ block_statement$ebnf$2 ● "}"
    do_term → "do" _ ● block_statement
    cterm →  ● do_term
    term →  ● cterm
    lambda_term → "(" _ lambda_arguments _ lambda_term$ebnf$1 ")" _ "=>" _ ● term
    cterm →  ● lambda_term
    term →  ● cterm
    variable_declaration → identifier_token _ "=" _ ● term
    declaration →  ● variable_declaration
    let_declarations_tail → _ ";" _ ● declaration
    let_declarations$ebnf$1 → let_declarations$ebnf$1 ● let_declarations_tail
    let_declarations → declaration ● let_declarations$ebnf$1
    let_term → "let" _ ● let_declarations _ let_term$ebnf$1 "in" _ term
    cterm →  ● let_term
    term →  ● cterm
    file → _ ● term _
    main →  ● file
A ";" based on:
    block_statement$ebnf$2$subexpression$1 →  ● ";" _
    block_statement$ebnf$2 → block_statement$ebnf$2 ● block_statement$ebnf$2$subexpression$1
    block_statement → "{" _ block_statement$ebnf$1 _ ● block_statement$ebnf$2 "}"
    do_term → "do" _ ● block_statement
    cterm →  ● do_term
    term →  ● cterm
    lambda_term → "(" _ lambda_arguments _ lambda_term$ebnf$1 ")" _ "=>" _ ● term
    cterm →  ● lambda_term
    term →  ● cterm
    variable_declaration → identifier_token _ "=" _ ● term
    declaration →  ● variable_declaration
    let_declarations_tail → _ ";" _ ● declaration
    let_declarations$ebnf$1 → let_declarations$ebnf$1 ● let_declarations_tail
    let_declarations → declaration ● let_declarations$ebnf$1
    let_term → "let" _ ● let_declarations _ let_term$ebnf$1 "in" _ term
    cterm →  ● let_term
    term →  ● cterm
    file → _ ● term _
    main →  ● file
],
  ],
  "value": null,
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "lambda1": lambda1 1`] = `
Object {
  "value": Object {
    "args": Array [
      "x",
    ],
    "body": Object {
      "ann": Object {
        "scope": Scope {
          "enclosingScope": Scope {
            "enclosingScope": null,
            "symbols": Map {},
          },
          "symbols": Map {
            "x" => Object {
              "id": "x",
              "scope": [Circular],
            },
          },
        },
        "span": Object {
          "column": Object {
            "end": 9,
            "start": 8,
          },
          "line": Object {
            "end": 1,
            "start": 1,
          },
          "type": "Span",
        },
      },
      "tag": "VariableTerm",
      "variable": "x",
    },
    "tag": "LambdaValue",
  },
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "let1": let1 1`] = `
Object {
  "value": Object {
    "ann": Object {
      "scope": Scope {
        "enclosingScope": Scope {
          "enclosingScope": null,
          "symbols": Map {},
        },
        "symbols": Map {
          "x" => Object {
            "id": "x",
            "scope": [Circular],
          },
        },
      },
      "span": Object {
        "column": Object {
          "end": 10,
          "start": 9,
        },
        "line": Object {
          "end": 1,
          "start": 1,
        },
        "type": "Span",
      },
    },
    "num": 1,
    "tag": "NumberValue",
  },
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "let2": let2 1`] = `
Object {
  "value": Object {
    "ann": Object {
      "scope": Scope {
        "enclosingScope": Scope {
          "enclosingScope": null,
          "symbols": Map {},
        },
        "symbols": Map {
          "x" => Object {
            "id": "x",
            "scope": [Circular],
          },
        },
      },
      "span": Object {
        "column": Object {
          "end": 10,
          "start": 9,
        },
        "line": Object {
          "end": 1,
          "start": 1,
        },
        "type": "Span",
      },
    },
    "num": 1,
    "tag": "NumberValue",
  },
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "let3": let3 1`] = `
Object {
  "value": Object {
    "elements": Array [
      Object {
        "ann": Object {
          "scope": Scope {
            "enclosingScope": Scope {
              "enclosingScope": null,
              "symbols": Map {},
            },
            "symbols": Map {
              "x" => Object {
                "id": "x",
                "scope": [Circular],
              },
              "y" => Object {
                "id": "y",
                "scope": [Circular],
              },
            },
          },
          "span": Object {
            "column": Object {
              "end": 10,
              "start": 9,
            },
            "line": Object {
              "end": 1,
              "start": 1,
            },
            "type": "Span",
          },
        },
        "num": 1,
        "tag": "NumberValue",
      },
      Object {
        "ann": Object {
          "scope": Scope {
            "enclosingScope": Scope {
              "enclosingScope": null,
              "symbols": Map {},
            },
            "symbols": Map {
              "x" => Object {
                "id": "x",
                "scope": [Circular],
              },
              "y" => Object {
                "id": "y",
                "scope": [Circular],
              },
            },
          },
          "span": Object {
            "column": Object {
              "end": 17,
              "start": 16,
            },
            "line": Object {
              "end": 1,
              "start": 1,
            },
            "type": "Span",
          },
        },
        "num": 2,
        "tag": "NumberValue",
      },
    ],
    "tag": "ArrayValue",
  },
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "null1": null1 1`] = `
Object {
  "errors": Array [
    [Error: No parse results were recovered.],
  ],
  "value": null,
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "null2": null2 1`] = `
Object {
  "value": Object {
    "ann": Object {
      "scope": Scope {
        "enclosingScope": null,
        "symbols": Map {},
      },
      "span": Object {
        "column": Object {
          "end": 5,
          "start": 1,
        },
        "line": Object {
          "end": 1,
          "start": 1,
        },
        "type": "Span",
      },
    },
    "tag": "NullValue",
  },
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "number1": number1 1`] = `
Object {
  "value": Object {
    "ann": Object {
      "scope": Scope {
        "enclosingScope": null,
        "symbols": Map {},
      },
      "span": Object {
        "column": Object {
          "end": 2,
          "start": 1,
        },
        "line": Object {
          "end": 1,
          "start": 1,
        },
        "type": "Span",
      },
    },
    "num": 0,
    "tag": "NumberValue",
  },
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "number2": number2 1`] = `
Object {
  "value": Object {
    "ann": Object {
      "scope": Scope {
        "enclosingScope": null,
        "symbols": Map {},
      },
      "span": Object {
        "column": Object {
          "end": 11,
          "start": 1,
        },
        "line": Object {
          "end": 1,
          "start": 1,
        },
        "type": "Span",
      },
    },
    "num": 1234567890,
    "tag": "NumberValue",
  },
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "number3": number3 1`] = `
Object {
  "value": Object {
    "ann": Object {
      "scope": Scope {
        "enclosingScope": null,
        "symbols": Map {},
      },
      "span": Object {
        "column": Object {
          "end": 22,
          "start": 1,
        },
        "line": Object {
          "end": 1,
          "start": 1,
        },
        "type": "Span",
      },
    },
    "num": 1234567890.0123458,
    "tag": "NumberValue",
  },
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "string1": string1 1`] = `
Object {
  "value": Object {
    "ann": Object {
      "scope": Scope {
        "enclosingScope": null,
        "symbols": Map {},
      },
      "span": Object {
        "column": Object {
          "end": 3,
          "start": 1,
        },
        "line": Object {
          "end": 1,
          "start": 1,
        },
        "type": "Span",
      },
    },
    "str": "",
    "tag": "StringValue",
  },
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "string2": string2 1`] = `
Object {
  "value": Object {
    "ann": Object {
      "scope": Scope {
        "enclosingScope": null,
        "symbols": Map {},
      },
      "span": Object {
        "column": Object {
          "end": 3,
          "start": 1,
        },
        "line": Object {
          "end": 1,
          "start": 1,
        },
        "type": "Span",
      },
    },
    "str": "",
    "tag": "StringValue",
  },
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "string3": string3 1`] = `
Object {
  "value": Object {
    "ann": Object {
      "scope": Scope {
        "enclosingScope": null,
        "symbols": Map {},
      },
      "span": Object {
        "column": Object {
          "end": 15,
          "start": 1,
        },
        "line": Object {
          "end": 1,
          "start": 1,
        },
        "type": "Span",
      },
    },
    "str": "Hello world!",
    "tag": "StringValue",
  },
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "string4": string4 1`] = `
Object {
  "value": Object {
    "ann": Object {
      "scope": Scope {
        "enclosingScope": null,
        "symbols": Map {},
      },
      "span": Object {
        "column": Object {
          "end": 15,
          "start": 1,
        },
        "line": Object {
          "end": 1,
          "start": 1,
        },
        "type": "Span",
      },
    },
    "str": "Hello World!",
    "tag": "StringValue",
  },
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "string5": string5 1`] = `
Object {
  "value": Object {
    "ann": Object {
      "scope": Scope {
        "enclosingScope": null,
        "symbols": Map {},
      },
      "span": Object {
        "column": Object {
          "end": 47,
          "start": 1,
        },
        "line": Object {
          "end": 1,
          "start": 1,
        },
        "type": "Span",
      },
    },
    "str": "The quick brown fox jumps over the lazy dog.",
    "tag": "StringValue",
  },
}
`;

exports[`CoolScript Standard Evaluator Golden Test Suite Evaluating example "string6": string6 1`] = `
Object {
  "value": Object {
    "ann": Object {
      "scope": Scope {
        "enclosingScope": null,
        "symbols": Map {},
      },
      "span": Object {
        "column": Object {
          "end": 47,
          "start": 1,
        },
        "line": Object {
          "end": 1,
          "start": 1,
        },
        "type": "Span",
      },
    },
    "str": "The quick brown fox jumps over the lazy dog.",
    "tag": "StringValue",
  },
}
`;
